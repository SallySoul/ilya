"use strict";

var _path = _interopRequireDefault(require("path"));

var _electron = require("electron");

var _ilya_node = _interopRequireDefault(require("ilya_node"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Originally from electron-react-boilerplate
// Modified
const isDevelopment = process.env.NODE_ENV === 'development';
let mainWindow = null;
let forceQuit = false;

const installExtensions = async () => {
  const installer = require('electron-devtools-installer');

  const extensions = ['REACT_DEVELOPER_TOOLS', 'REDUX_DEVTOOLS'];
  const forceDownload = !!process.env.UPGRADE_EXTENSIONS;

  for (const name of extensions) {
    try {
      await installer.default(installer[name], forceDownload);
    } catch (e) {
      console.log(`Error installing ${name} extension: ${e.message}`);
    }
  }
};

_electron.crashReporter.start({
  productName: 'ilya',
  companyName: 'Studio',
  submitURL: 'https://your-domain.com/url-to-submit',
  uploadToServer: false
});

_electron.app.on('window-all-closed', () => {
  // On OS X it is common for applications and their menu bar
  // to stay active until the user quits explicitly with Cmd + Q
  if (process.platform !== 'darwin') {
    _electron.app.quit();
  }
});

_electron.app.on('ready', async () => {
  if (isDevelopment) {
    await installExtensions();
  }

  mainWindow = new _electron.BrowserWindow({
    width: 1000,
    height: 800,
    minWidth: 640,
    minHeight: 480,
    show: false,
    webPreferences: {
      nodeIntegration: true
    }
  });
  mainWindow.loadFile(_path.default.resolve(_path.default.join(__dirname, 'index.html'))); // show window once on first load

  mainWindow.webContents.once('did-finish-load', () => {
    mainWindow.show();
  });
  mainWindow.webContents.on('did-finish-load', () => {
    // Handle window logic properly on macOS:
    // 1. App should not terminate if window has been closed
    // 2. Click on icon in dock should re-open the window
    // 3. âŒ˜+Q should close the window and quit the app
    if (process.platform === 'darwin') {
      mainWindow.on('close', function (e) {
        if (!forceQuit) {
          e.preventDefault();
          mainWindow.hide();
        }
      });

      _electron.app.on('activate', () => {
        mainWindow.show();
      });

      _electron.app.on('before-quit', () => {
        forceQuit = true;
      });
    } else {
      mainWindow.on('closed', () => {
        mainWindow = null;
      });
    }
  });

  if (isDevelopment) {
    // auto-open dev tools
    mainWindow.webContents.openDevTools(); // add inspect element on right click menu

    mainWindow.webContents.on('context-menu', (e, props) => {
      _electron.Menu.buildFromTemplate([{
        label: 'Inspect element',

        click() {
          mainWindow.inspectElement(props.x, props.y);
        }

      }]).popup(mainWindow);
    });
  }
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImlzRGV2ZWxvcG1lbnQiLCJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJtYWluV2luZG93IiwiZm9yY2VRdWl0IiwiaW5zdGFsbEV4dGVuc2lvbnMiLCJpbnN0YWxsZXIiLCJyZXF1aXJlIiwiZXh0ZW5zaW9ucyIsImZvcmNlRG93bmxvYWQiLCJVUEdSQURFX0VYVEVOU0lPTlMiLCJuYW1lIiwiZGVmYXVsdCIsImUiLCJjb25zb2xlIiwibG9nIiwibWVzc2FnZSIsImNyYXNoUmVwb3J0ZXIiLCJzdGFydCIsInByb2R1Y3ROYW1lIiwiY29tcGFueU5hbWUiLCJzdWJtaXRVUkwiLCJ1cGxvYWRUb1NlcnZlciIsImFwcCIsIm9uIiwicGxhdGZvcm0iLCJxdWl0IiwiQnJvd3NlcldpbmRvdyIsIndpZHRoIiwiaGVpZ2h0IiwibWluV2lkdGgiLCJtaW5IZWlnaHQiLCJzaG93Iiwid2ViUHJlZmVyZW5jZXMiLCJub2RlSW50ZWdyYXRpb24iLCJsb2FkRmlsZSIsInBhdGgiLCJyZXNvbHZlIiwiam9pbiIsIl9fZGlybmFtZSIsIndlYkNvbnRlbnRzIiwib25jZSIsInByZXZlbnREZWZhdWx0IiwiaGlkZSIsIm9wZW5EZXZUb29scyIsInByb3BzIiwiTWVudSIsImJ1aWxkRnJvbVRlbXBsYXRlIiwibGFiZWwiLCJjbGljayIsImluc3BlY3RFbGVtZW50IiwieCIsInkiLCJwb3B1cCJdLCJtYXBwaW5ncyI6Ijs7QUFHQTs7QUFDQTs7QUFDQTs7OztBQUxBO0FBQ0E7QUFNQSxNQUFNQSxhQUFhLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLGFBQS9DO0FBRUEsSUFBSUMsVUFBVSxHQUFHLElBQWpCO0FBQ0EsSUFBSUMsU0FBUyxHQUFHLEtBQWhCOztBQUVBLE1BQU1DLGlCQUFpQixHQUFHLFlBQVk7QUFDcEMsUUFBTUMsU0FBUyxHQUFHQyxPQUFPLENBQUMsNkJBQUQsQ0FBekI7O0FBQ0EsUUFBTUMsVUFB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QUNqQjtBQUNBSSxJQUFBQSxVQUFVLENBQUNxQyxXQUFYLENBQXVCSSxZQUF2QixHQUZpQixDQUlqQjs7QUFDQXpDLElBQUFBLFVBQVUsQ0FBQ3FDLFdBQVgsQ0FBdUJoQixFQUF2QixDQUEwQixjQUExQixFQUEwQyxDQUFDWCxDQUFELEVBQUlnQyxLQUFKLEtBQWM7QUFDdERDLHFCQUFLQyxpQkFBTCxDQUF1QixDQUNyQjtBQUNFQyxRQUFBQSxLQUFLLEVBQUUsaUJBRFQ7O0FBRUVDLFFBQUFBLEtBQUssR0FBRztBQUNOOUMsVUFBQUEsVUFBVSxDQUFDK0MsY0FBWCxDQUEwQkwsS0FBSyxDQUFDTSxDQUFoQyxFQUFtQ04sS0FBSyxDQUFDTyxDQUF6QztBQUNEOztBQUpILE9BRHFCLENBQXZCLEVBT0dDLEtBUEgsQ0FPU2xELFVBUFQ7QUFRRCxLQVREO0FBVUQ7QUFDRixDQWxFRCIsInNvdXJjZXNDb250ZW50IjpbIi8vIE9yaWdpbmFsbHkgZnJvbSBlbGVjdHJvbi1yZWFjdC1ib2lsZXJwbGF0ZVxuLy8gTW9kaWZpZWRcblxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBhcHAsIGNyYXNoUmVwb3J0ZXIsIEJyb3dzZXJXaW5kb3csIE1lbnUgfSBmcm9tICdlbGVjdHJvbic7XG5pbXBvcnQgU3RhdGljQXNzaXRNYXAgZnJvbSAnaWx5YV9ub2RlJztcblxuY29uc3QgaXNEZXZlbG9wbWVudCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnZGV2ZWxvcG1lbnQnO1xuXG5sZXQgbWFpbldpbmRvdyA9IG51bGw7XG5sZXQgZm9yY2VRdWl0ID0gZmFsc2U7XG5cbmNvbnN0IGluc3RhbGxFeHRlbnNpb25zID0gYXN5bmMgKCkgPT4ge1xuICBjb25zdCBpbnN0YWxsZXIgPSByZXF1aXJlKCdlbGVjdHJvbi1kZXZ0b29scy1pbnN0YWxsZXInKTtcbiAgY29uc3QgZXh0ZW5zaW9ucyA9IFsnUkVBQ1RfREVWRUxPUEVSX1RPT0xTJywgJ1JFRFVYX0RFVlRPT0xTJ107XG4gIGNvbnN0IGZvcmNlRG93bmxvYWQgPSAhIXByb2Nlc3MuZW52LlVQR1JBREVfRVhURU5TSU9OUztcbiAgZm9yIChjb25zdCBuYW1lIG9mIGV4dGVuc2lvbnMpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgaW5zdGFsbGVyLmRlZmF1bHQoaW5zdGFsbGVyW25hbWVdLCBmb3JjZURvd25sb2FkKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLmxvZyhgRXJyb3IgaW5zdGFsbGluZyAke25hbWV9IGV4dGVuc2lvbjogJHtlLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG59O1xuXG5jcmFzaFJlcG9ydGVyLnN0YXJ0KHtcbiAgcHJvZHVjdE5hbWU6ICdpbHlhJyxcbiAgY29tcGFueU5hbWU6ICdTdHVkaW8nLFxuICBzdWJtaXRVUkw6ICdodHRwczovL3lvdXItZG9tYWluLmNvbS91cmwtdG8tc3VibWl0JyxcbiAgdXBsb2FkVG9TZXJ2ZXI6IGZhbHNlLFxufSk7XG5cbmFwcC5vbignd2luZG93LWFsbC1jbG9zZWQnLCAoKSA9PiB7XG4gIC8vIE9uIE9TIFggaXQgaXMgY29tbW9uIGZvciBhcHBsaWNhdGlvbnMgYW5kIHRoZWlyIG1lbnUgYmFyXG4gIC8vIHRvIHN0YXkgYWN0aXZlIHVudGlsIHRoZSB1c2VyIHF1aXRzIGV4cGxpY2l0bHkgd2l0aCBDbWQgKyBRXG4gIGlmIChwcm9jZXNzLnBsYXRmb3JtICE9PSAnZGFyd2luJykge1xuICAgIGFwcC5xdWl0KCk7XG4gIH1cbn0pO1xuXG5hcHAub24oJ3JlYWR5JywgYXN5bmMgKCkgPT4ge1xuICBpZiAoaXNEZXZlbG9wbWVudCkge1xuICAgIGF3YWl0IGluc3RhbGxFeHRlbnNpb25zKCk7XG4gIH1cblxuICBtYWluV2luZG93ID0gbmV3IEJyb3dzZXJXaW5kb3coe1xuICAgIHdpZHRoOiAxMDAwLFxuICAgIGhlaWdodDogODAwLFxuICAgIG1pbldpZHRoOiA2NDAsXG4gICAgbWluSGVpZ2h0OiA0ODAsXG4gICAgc2hvdzogZmFsc2UsXG4gICAgd2ViUHJlZmVyZW5jZXM6IHtcbiAgICAgIG5vZGVJbnRlZ3JhdGlvbjogdHJ1ZSxcbiAgICB9LFxuICB9KTtcblxuICBtYWluV2luZG93LmxvYWRGaWxlKHBhdGgucmVzb2x2ZShwYXRoLmpvaW4oX19kaXJuYW1lLCAnaW5kZXguaHRtbCcpKSk7XG5cbiAgLy8gc2hvdyB3aW5kb3cgb25jZSBvbiBmaXJzdCBsb2FkXG4gIG1haW5XaW5kb3cud2ViQ29udGVudHMub25jZSgnZGlkLWZpbmlzaC1sb2FkJywgKCkgPT4ge1xuICAgIG1haW5XaW5kb3cuc2hvdygpO1xuICB9KTtcblxuICBtYWluV2luZG93LndlYkNvbnRlbnRzLm9uKCdkaWQtZmluaXNoLWxvYWQnLCAoKSA9PiB7XG4gICAgLy8gSGFuZGxlIHdpbmRvdyBsb2dpYyBwcm9wZXJseSBvbiBtYWNPUzpcbiAgICAvLyAxLiBBcHAgc2hvdWxkIG5vdCB0ZXJtaW5hdGUgaWYgd2luZG93IGhhcyBiZWVuIGNsb3NlZFxuICAgIC8vIDIuIENsaWNrIG9uIGljb24gaW4gZG9jayBzaG91bGQgcmUtb3BlbiB0aGUgd2luZG93XG4gICAgLy8gMy4g4oyYK1Egc2hvdWxkIGNsb3NlIHRoZSB3aW5kb3cgYW5kIHF1aXQgdGhlIGFwcFxuICAgIGlmIChwcm9jZXNzLnBsYXRmb3JtID09PSAnZGFyd2luJykge1xuICAgICAgbWFpbldpbmRvdy5vbignY2xvc2UnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGlmICghZm9yY2VRdWl0KSB7XG4gICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG1haW5XaW5kb3cuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgYXBwLm9uKCdhY3RpdmF0ZScsICgpID0+IHtcbiAgICAgICAgbWFpbldpbmRvdy5zaG93KCk7XG4gICAgICB9KTtcblxuICAgICAgYXBwLm9uKCdiZWZvcmUtcXVpdCcsICgpID0+IHtcbiAgICAgICAgZm9yY2VRdWl0ID0gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYWluV2luZG93Lm9uKCdjbG9zZWQnLCAoKSA9PiB7XG4gICAgICAgIG1haW5XaW5kb3cgPSBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcblxuICBpZiAoaXNEZXZlbG9wbWVudCkge1xuICAgIC8vIGF1dG8tb3BlbiBkZXYgdG9vbHNcbiAgICBtYWluV2luZG93LndlYkNvbnRlbnRzLm9wZW5EZXZUb29scygpO1xuXG4gICAgLy8gYWRkIGluc3BlY3QgZWxlbWVudCBvbiByaWdodCBjbGljayBtZW51XG4gICAgbWFpbldpbmRvdy53ZWJDb250ZW50cy5vbignY29udGV4dC1tZW51JywgKGUsIHByb3BzKSA9PiB7XG4gICAgICBNZW51LmJ1aWxkRnJvbVRlbXBsYXRlKFtcbiAgICAgICAge1xuICAgICAgICAgIGxhYmVsOiAnSW5zcGVjdCBlbGVtZW50JyxcbiAgICAgICAgICBjbGljaygpIHtcbiAgICAgICAgICAgIG1haW5XaW5kb3cuaW5zcGVjdEVsZW1lbnQocHJvcHMueCwgcHJvcHMueSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0pLnBvcHVwKG1haW5XaW5kb3cpO1xuICAgIH0pO1xuICB9XG59KTtcbiJdLCJmaWxlIjoiaW5kZXguanMifQ==
